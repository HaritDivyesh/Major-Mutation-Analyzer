<?xml version="1.0"?>
<!--
 Copyright (c) 2005, DoodleProject
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 
 Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.
 
 Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in
 the documentation and/or other materials provided with the
 distribution.
 
 Neither the name of DoodleProject nor the names of its contributors
 may be used to endorse or promote products derived from this
 software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.
-->
<!-- $Revision: 1.1 $ $Date: 2006/01/06 21:52:42 $ -->
<document>
  <properties>
    <title>User Guide :: Series</title>
  </properties>
  <body>
    <section name="Series">
      <p>
        <b>numerics4j</b> provides the means to create and evaluate infinite
        series.  See
        <a target="_blank" href="http://mathworld.wolfram.com/Series.html">Series</a>
        for an in depth definition of infinite series.  To create a series,
        simply subclass
        <a target="_blank"  href="../../apidocs/net/sf/doodleproject/numerics4j/series/Series.html">net.sf.doodleproject.numerics4j.series.Series</a>
        and provide an implementation for the <code>getTerm</code> method,
        which returns the series terms.
      </p>
      <p>
        The <code>Series</code> class is flexible with regards to the variety of convergent, infinite series it can represent.  For example it
        can be used on geometric series, ones whose ratio of consecutive terms is constant like "the" geometric series: <source>Series geometric = new Series() {
    public double getTerm(int n, double x) {
        return Math.pow(.5, n);
    }
};

double x = geometric.evaluate(0.0);  // returns 2.0 for all input values.</source>
      </p>
      <p>
        Also, the <code>Series</code> class can represent series whose terms are
        not only functions of their indices, but also functions of an
        evaluation point.  A lot of common series fit this general definition including power series and Taylor series.
		As such, these series can be evaluated
        numerically using the <code>Series</code> class.  For example,
        the <a target="_blank" href="http://functions.wolfram.com/ElementaryFunctions/Exp/06/01/01/0002//">exponetial function</a>
        can be evaulated with a series:<source>Series exponential = new Series() {
    public double getTerm(int n, double x) {
        return Math.pow(x, n) / factorial(n);
    }
    
    private double factorial(int n) {
        double p = 1.0;
        for(int i = n; i > 0; --i) {
            p *= i;
        }
        return p;
    }
};

double x = exponential.evaluate(2.0); // Math.exp(2.0)
double x = exponential.evaluate(4.0); // Math.exp(4.0)</source>
      </p>
    </section>
  </body>
</document>